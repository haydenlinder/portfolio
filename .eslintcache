[{"/Users/hayden/Desktop/projects/portfolio/src/App.js":"1","/Users/hayden/Desktop/projects/portfolio/src/components/ScrollArea.jsx":"2","/Users/hayden/Desktop/projects/portfolio/src/index.js":"3","/Users/hayden/Desktop/projects/portfolio/src/components/Header.jsx":"4","/Users/hayden/Desktop/projects/portfolio/src/components/Bulb.jsx":"5","/Users/hayden/Desktop/projects/portfolio/src/components/Layout.jsx":"6","/Users/hayden/Desktop/projects/portfolio/src/components/AboutMenuItem.jsx":"7","/Users/hayden/Desktop/projects/portfolio/src/components/Text.jsx":"8","/Users/hayden/Desktop/projects/portfolio/src/state.js":"9","/Users/hayden/Desktop/projects/portfolio/src/reportWebVitals.js":"10"},{"size":1413,"mtime":1606786773798,"results":"11","hashOfConfig":"12"},{"size":667,"mtime":1606786671299,"results":"13","hashOfConfig":"12"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":939,"mtime":1606784348550,"results":"15","hashOfConfig":"12"},{"size":253,"mtime":1606613063860,"results":"16","hashOfConfig":"12"},{"size":1399,"mtime":1606784466491,"results":"17","hashOfConfig":"12"},{"size":2476,"mtime":1606756813126,"results":"18","hashOfConfig":"12"},{"size":1454,"mtime":1606718750444,"results":"19","hashOfConfig":"12"},{"size":69,"mtime":1606785985710,"results":"20","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"fs2drw",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19u7a9l","/Users/hayden/Desktop/projects/portfolio/src/App.js",["48"],"import { Canvas } from 'react-three-fiber';\nimport { Suspense } from 'react';\nimport Bulb from './components/Bulb';\nimport Layout from './components/Layout';\nimport ScrollArea from './components/ScrollArea';\nimport Header from './components/Header'\nimport state from './state'\n\nfunction App() {\n  const handleTouchStart = e => {\n    state.touchY = e.touches.item(0).pageY\n  }\n\n  const handleTouchMove = e => {\n    const touchY = e.touches.item(0).pageY\n    const event = { nativeEvent: { deltaY: touchY - state.touchY } }\n    handleScroll(event)\n    state.touchY = touchY\n  }\n\n  const handleScroll = e => {\n    const delta = e.nativeEvent.deltaY/16\n    if (delta < 0)\n      state.top = Math.max(state.top + delta,0)\n    else\n      state.top = Math.min(state.top + delta,80)\n  }\n  return (\n    <div \n      style={{ \n        height: '100vh', \n        width: '100vw',\n      }}\n      onWheel={handleScroll}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n    >\n      <Canvas \n        concurrent\n        camera={ { position: [0,0,50] } }\n        colorManagement\n        shadowMap\n      >\n        <axesHelper args={[5]}/>\n        <ambientLight intensity={0.3}/>\n        <Bulb position={[0, 30, 40]}/>\n        <Suspense fallback={null}>\n          <Header />\n          <Layout />\n        </Suspense>\n      </Canvas> \n      {/* <ScrollArea pages={3} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/hayden/Desktop/projects/portfolio/src/components/ScrollArea.jsx",[],"/Users/hayden/Desktop/projects/portfolio/src/index.js",[],"/Users/hayden/Desktop/projects/portfolio/src/components/Header.jsx",[],["49","50"],"/Users/hayden/Desktop/projects/portfolio/src/components/Bulb.jsx",[],"/Users/hayden/Desktop/projects/portfolio/src/components/Layout.jsx",["51","52"],"import { Flex, Box } from '@react-three/flex';\nimport { useRef } from 'react';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport { useAspect } from '@react-three/drei'\nimport state from '../state';\nimport * as THREE from 'three';\nimport Text from './Text';\nimport AboutMenuItem from './AboutMenuItem'\n\nconst Layout = () => {\n    const groupRef = useRef()\n    const vec = new THREE.Vector3()\n\n    useFrame(three => {\n        window.state = three\n        groupRef.current.position.lerp(\n            vec.set(0, 0, state.top),\n            0.1\n        )\n    })\n\n    const { size } = useThree();\n    const [vpWidth, vpHeight] = useAspect(\"cover\", size.width, size.height)\n    return (\n        <group ref={groupRef}>\n            <Flex\n                align=\"center\"\n                position={[-(vpWidth-2)/2,vpHeight/2 - 5, 2]}\n                size={[vpWidth-2,0,1]}\n            >\n                <AboutMenuItem /> \n            </Flex>\n            <mesh position={[0, 0, 0]} receiveShadow >\n                <planeBufferGeometry args={[vpWidth+5,vpHeight+5]} />\n                <meshPhysicalMaterial color='white' />\n            </mesh>\n            <mesh position={[0, 0, -80]} receiveShadow >\n                <planeBufferGeometry args={[vpWidth+50,vpHeight+50]} />\n                <meshPhysicalMaterial color='aquamarine' />\n            </mesh>\n        </group>\n    )\n}\n\nexport default Layout;","/Users/hayden/Desktop/projects/portfolio/src/components/AboutMenuItem.jsx",["53","54"],"import { Box } from '@react-three/flex'\nimport { useFrame } from 'react-three-fiber'\nimport { useRef } from 'react'\nimport Text from './Text'\nimport * as THREE from 'three'\n\nconst AboutMenuItem = props => {\n    const ref = useRef()\n    const sphereRef = useRef()\n    useFrame(({ clock }) => {\n        sphereRef.current.rotation.y -= 0.05\n        ref.current.position.y += 0.05*Math.sin(2*clock.getElapsedTime())\n        \n        switch (ref.current.hover) {\n            case 1:\n                ref.current.position.lerp({ x: 0, y:-15, z:20 }, 0.02)\n            case 2:\n                ref.current.position.lerp({ x: 0, y:0, z:0 }, 0.02)\n                if (ref.current.position.y === 0) ref.current.hover = 0\n            default: \n                break\n        } \n    });\n\n    const handlePointerEnter = e => {\n        ref.current.hover = 1\n    }\n    const handlePointerLeave = e => {\n        ref.current.hover = 2\n    }\n\n    return (\n        <group ref={ref} >\n            <Box centerAnchor align='center' p={3}>\n                <group ref={sphereRef}>\n                    <mesh position={[0, -1, 0]} onPointerEnter={handlePointerEnter} onPointerLeave={handlePointerLeave}>\n                        <sphereBufferGeometry args={[6]} />\n                        <meshPhysicalMaterial side={THREE.DoubleSide} transparent transmission={0.9} clearcoat={1} reflectivity={1} roughness={0}/>\n                    </mesh>\n                    <Text color='red' size={1.5} position={[0,0,2]} >\n                        ?\n                    </Text>\n                    <Text color='red' size={1.5} position={[0,0,-2]} rotation={[0,3.14,0]}>\n                        ?\n                    </Text>\n                    <Text color='red' size={1.5} position={[0,0,2]} >\n                        ?\n                    </Text>\n                    <Text color='red' size={1.5} position={[2,0,0]} rotation={[0,1.57,0]}>\n                        ?\n                    </Text>\n                    <Text color='red' size={1.5} position={[-2,0,]} rotation={[0,-1.57,0]}>\n                        ?\n                    </Text>\n                    <mesh castShadow receiveShadow>\n                        <sphereBufferGeometry args={[2]}/>\n                        <meshPhysicalMaterial /> \n                    </mesh>\n                </group>\n                <Text position={[0,-3,0]}>\n                    About\n                </Text>\n            </Box>\n        </group>\n    )\n}\n\nexport default AboutMenuItem","/Users/hayden/Desktop/projects/portfolio/src/components/Text.jsx",["55"],"import * as THREE from \"three\"\nimport React, { useMemo } from \"react\"\nimport { useUpdate } from \"react-three-fiber\"\nimport * as data from 'three/examples/fonts/helvetiker_bold.typeface.json'\n\nconst Text = ({\n    children,\n    vAlign = \"center\",\n    hAlign = \"center\",\n    size = 1,\n    color = \"#000000\",\n    ...props\n}) => {\n    const font = new THREE.Font(data.default)\n    const config = useMemo(\n        () => ({\n            font,\n            size: 16,\n            height: 1,\n            curveSegments: 32,\n            // bevelEnabled: true,\n            bevelThickness: 3,\n            // bevelSize: 1,\n            // bevelOffset: 0,\n            // bevelSegments: 8,\n        }),\n        [font]\n    )\n    const mesh = useUpdate(\n        (self) => {\n            const size = new THREE.Vector3()\n            self.geometry.computeBoundingBox()\n            self.geometry.boundingBox.getSize(size)\n            self.position.x = hAlign === \"center\" ? -size.x / 2 : hAlign === \"right\" ? 0 : -size.x\n            self.position.y = vAlign === \"center\" ? -size.y / 2 : vAlign === \"top\" ? 0 : -size.y\n        },\n        [children],\n    )\n    return (\n        <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n            <mesh ref={mesh} castShadow receiveShadow>\n                <textGeometry args={[children, config]} />\n                <meshPhysicalMaterial color={color} clearcoat={1}/>\n            </mesh>\n        </group>\n    )\n}\n\nexport default Text;","/Users/hayden/Desktop/projects/portfolio/src/state.js",[],"/Users/hayden/Desktop/projects/portfolio/src/reportWebVitals.js",[],{"ruleId":"56","severity":1,"message":"57","line":5,"column":8,"nodeType":"58","messageId":"59","endLine":5,"endColumn":18},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"64","line":1,"column":16,"nodeType":"58","messageId":"59","endLine":1,"endColumn":19},{"ruleId":"56","severity":1,"message":"65","line":7,"column":8,"nodeType":"58","messageId":"59","endLine":7,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":17,"column":13,"nodeType":"68","messageId":"69","endLine":19,"endColumn":72},{"ruleId":"66","severity":1,"message":"70","line":20,"column":13,"nodeType":"68","messageId":"71","endLine":21,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":14,"column":11,"nodeType":"74","endLine":14,"endColumn":46},"no-unused-vars","'ScrollArea' is defined but never used.","Identifier","unusedVar","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"'Box' is defined but never used.","'Text' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","react-hooks/exhaustive-deps","The 'font' object construction makes the dependencies of useMemo Hook (at line 27) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'font' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]