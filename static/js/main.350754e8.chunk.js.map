{"version":3,"sources":["components/Bulb.jsx","state.js","components/Text.jsx","components/Layout.jsx","components/ScrollArea.jsx","App.js","reportWebVitals.js","index.js"],"names":["Bulb","props","castShadow","color","args","state","top","Text","children","vAlign","hAlign","size","font","THREE","data","config","useMemo","height","curveSegments","bevelThickness","mesh","useUpdate","self","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","scale","ref","receiveShadow","Layout","groupRef","useRef","vec","useFrame","three","window","current","lerp","set","useThree","useAspect","width","vpWidth","mainAxis","crossAxis","flexDirection","flexWrap","justify","alignItems","centerAnchor","Array","fill","margin","ScrollArea","pages","style","left","overflow","onScroll","e","target","scrollTop","App","concurrent","noEvents","camera","colorManagement","shadowMap","onPointerMove","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.350754e8.chunk.js","sourcesContent":["const Bulb = props => {\n    return (\n        <mesh {...props}>\n            <pointLight castShadow />\n            <meshStandardMaterial color='yellow'/>\n            <sphereBufferGeometry args={[0.2,100,100]}/>\n        </mesh>\n    )\n}\n\nexport default Bulb","const state = {\n    top: 0\n}\n\nexport default state;","import * as THREE from \"three\"\nimport React, { useMemo } from \"react\"\nimport { useLoader, useUpdate } from \"react-three-fiber\"\nimport * as data from 'three/examples/fonts/helvetiker_regular.typeface.json'\n\nconst Text = ({\n    children,\n    vAlign = \"center\",\n    hAlign = \"center\",\n    size = 1,\n    color = \"#000000\",\n    ...props\n}) => {\n    const font = new THREE.Font(data.default)\n    // const font = useLoader(THREE.FontLoader, \"three/examples/fonts/helvetiker_regular.typeface.json\")\n    const config = useMemo(\n        () => ({\n            font,\n            size: 16,\n            height: 1,\n            curveSegments: 32,\n            // bevelEnabled: true,\n            bevelThickness: 3,\n            // bevelSize: 1,\n            // bevelOffset: 0,\n            // bevelSegments: 8,\n        }),\n        [font]\n    )\n    const mesh = useUpdate(\n        (self) => {\n            const size = new THREE.Vector3()\n            self.geometry.computeBoundingBox()\n            self.geometry.boundingBox.getSize(size)\n            self.position.x = hAlign === \"center\" ? -size.x / 2 : hAlign === \"right\" ? 0 : -size.x\n            self.position.y = vAlign === \"center\" ? -size.y / 2 : vAlign === \"top\" ? 0 : -size.y\n        },\n        [children],\n    )\n    return (\n        <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n            <mesh ref={mesh} castShadow receiveShadow>\n                <textGeometry args={[children, config]} />\n                <meshPhysicalMaterial color=\"black\" />\n            </mesh>\n        </group>\n    )\n}\n\nexport default Text;","import { Flex, Box } from '@react-three/flex';\nimport { useRef } from 'react';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport { useAspect } from '@react-three/drei'\nimport state from '../state';\nimport * as THREE from 'three';\nimport Text from './Text'\n\nconst Layout = () => {\n    const groupRef = useRef()\n\n    const vec = new THREE.Vector3()\n    useFrame(three => {\n        window.state = three\n        groupRef.current.position.lerp(\n            vec.set(0, state.top, 0),\n            0.1\n        )\n    })\n\n    const { size  } = useThree();\n    const [vpWidth] = useAspect(\"cover\", size.width, size.height)\n\n    return (\n        <group ref={groupRef}>\n            <Flex\n                mainAxis=\"x\"\n                crossAxis=\"y\"\n                flexDirection=\"row\"\n                flexWrap=\"wrap\"\n                justify=\"center\"\n                alignItems=\"center\"\n                position={[-vpWidth/2, 6]}\n                size={[vpWidth,0,0]}\n            >\n                <Box centerAnchor>\n                    <Text \n                        scale={new Array(3).fill(1)}\n                    >\n                        HELLO\n                    </Text>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3} >\n                    <mesh castShadow receiveShadow>\n                        <torusBufferGeometry args={[1, 0.5, 10, 10]} />\n                        <meshPhysicalMaterial color='green' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor>\n                    <Text \n                        scale={new Array(3).fill(1)}\n                    >\n                        HELLO\n                    </Text>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3} >\n                    <mesh castShadow receiveShadow>\n                        <torusBufferGeometry args={[1, 0.5, 10, 10]} />\n                        <meshPhysicalMaterial color='green' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor>\n                    <Text \n                        scale={new Array(3).fill(1)}\n                    >\n                        HELLO\n                    </Text>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3} >\n                    <mesh castShadow receiveShadow>\n                        <torusBufferGeometry args={[1, 0.5, 10, 10]} />\n                        <meshPhysicalMaterial color='green' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor>\n                    <Text \n                        scale={new Array(3).fill(1)}\n                    >\n                        HELLO\n                    </Text>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3} >\n                    <mesh castShadow receiveShadow>\n                        <torusBufferGeometry args={[1, 0.5, 10, 10]} />\n                        <meshPhysicalMaterial color='green' />\n                    </mesh>\n                </Box>\n                <Box centerAnchor margin={0.3}>\n                    <mesh castShadow receiveShadow>\n                        <boxBufferGeometry args={[3, 1, 1]} />\n                        <meshPhysicalMaterial color='blue' />\n                    </mesh>\n                </Box>\n            </Flex>\n        </group>\n    )\n}\n\nexport default Layout;","import state from '../state';\n\nconst ScrollArea = ({ pages = 1 }) => {\n    const handleScroll = (e) => {\n        state.top = e.target.scrollTop/8\n    }\n\n    return(\n        <div style={{\n            height: '100vh',\n            width: '100vw',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            overflow: 'auto'\n        }}\n            onScroll={handleScroll}\n        >\n            <div\n                style={{\n                    height: `${pages * 100}vh`,\n                }}\n            >\n            </div>\n        </div>\n    )\n}\n\nexport default ScrollArea;","import { Flex, Box } from '@react-three/flex'\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport { useRef, useEffect, Suspense } from 'react';\nimport Bulb from './components/Bulb';\nimport * as THREE from 'three';\nimport state from './state';\nimport Layout from './components/Layout';\nimport ScrollArea from './components/ScrollArea';\n\nfunction App() {\n\n  return (\n    <div \n      style={{ \n        height: '100vh', \n        width: '100vw',\n        overflow: 'hidden'\n      }}\n    >\n      <Canvas \n        concurrent\n        noEvents\n        camera={ { position: [0,1,10] } }\n        colorManagement\n        shadowMap\n        onPointerMove={null}\n      >\n        <axesHelper args={[5]}/>\n        <ambientLight />\n        <Bulb position={[0, 3, 3]}/>\n        <Suspense fallback={null}>\n          <Layout />\n        </Suspense>\n      </Canvas> \n      <ScrollArea pages={1.5}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}